//
// Created by 唐仁初 on 2022/10/25.
//

#ifndef MONGOLOG_LOGSLOT_H
#define MONGOLOG_LOGSLOT_H

#include "LogServer.h"

#include <atomic>
#include <cstdlib>
#include <iostream>
#include <unistd.h>
namespace m_log::internal {

    class Arena;


    /// @brief LogSlot is the unit to achieve log group commit.
    /// @details Each thread that needs to write logs needs to write logs to a LogSlot and wait for group commit.
    /// All LogSlots are generated by LogPool.
    class LogSlot {
    public:

        /// Construct a log slot.
        /// \param size Size of slot
        /// \param pool Owner LogPool
        /// \param arena Use arena impl to malloc memory, default nullptr that means don't use.
        explicit LogSlot(size_t size, LogServer *pool, Arena *arena = nullptr);

        /// Destruction. Free malloced memory.
        ~LogSlot();

        /// Try to join this slot. If join action succeeds, this function will return the entry to copy slot.
        /// Otherwise, a nullptr will be returned.
        /// \param size Size of log
        /// \return Entry to copy log
        char *join(size_t size) {
            return join(static_cast<int>(size));
        }

        /// Try to join this slot. If join action succeeds, this function will return the entry to copy slot.
        /// Otherwise, a nullptr will be returned.
        /// \param size Size of log
        /// \return Entry to copy log
        char *join(int size);

        /// Copy log to acquired entry. Make sure that an entry of this slot was acquired by function join.
        /// \param pos Entry position
        /// \param str Log content
        /// \param size Log size
        /// \param sync Is sync required
        void copy(char *pos, const char *str, size_t size, bool sync) {
            return copy(pos, str, static_cast<int>(size), sync);
        }

        /// Copy log to acquired entry. Make sure that an entry of this slot was acquired by function join.
        /// \param pos Entry position
        /// \param str Log content
        /// \param size Log size
        /// \param sync Is sync required
        void copy(char *pos, const char *str, int size, bool sync);

        /// Wait log is written to os write cache.
        /// @note If one thread of this slot acquire sync to disk, this function will return after cache flushes.
        void wait();

        /// Allow next slot commit.
        void allowCommit();

    private:


        bool sync_ = false;

        std::atomic<int> flag_ = 0;  // 0 准备阶段，1 写入阶段，2 完成阶段
        std::atomic<int> state_ = 0;

        std::shared_ptr<LogSlot> nxt_;
        std::atomic<bool> commit_flag = false;

        int total_ = -1;
        char *start_;   // slot指针
        size_t max_size_;   // slot 支持最大 size

        LogServer *pool_; // 所属的日志池
    };
}

#endif //MONGOLOG_LOGSLOT_H
